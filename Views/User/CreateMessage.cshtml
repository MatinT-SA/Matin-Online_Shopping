@model Sourceiran_MVC.Models.Domains.Tbl_Message
@using CaptchaMvc
@using CaptchaMvc.HtmlHelpers

@{
    ViewBag.Title = "ارسال پیام";
    Layout = "~/Views/Shared/_Index.cshtml";
}

@section jsckeditor{
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>
}

<section class="nopadding-bottom padding-top-10 noborder-bottom">
    <div class="container">
        <div class="row">
            <div class="well" style="background-color:#fff;">

                <div style="@ViewBag.Style" class="@ViewBag.Class">
                    @if (ViewBag.Style != null)
                    {
                        <button type="button" class="close" data-dismiss="alert">×</button>
                    }

                    @Html.Raw(ViewBag.Message)
                </div>

                @using (Html.BeginForm("CreateMessage", "User", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        <hr />
                        @Html.ValidationSummary(false, "خطاها", new { @class = "text-danger" })

                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Text, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Text, new { @class = "ckeditor" })
                                @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.UserGet, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input class="form-control" type="text" name="UserGets" value=""
                                       required oninvalid="this.setCustomValidity('کاربر گیرنده باید وارد شود')" oninput="setCustomValidity('')" />
                                @Html.ValidationMessageFor(model => model.UserGet, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <span class="control-label col-md-2">کد امنیتی</span>
                            <div class="col-md-10">
                                @Html.Captcha("دوباره سازی", "", 3)
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="ثبت" class="btn btn-success" />
                                @Html.ActionLink("بازگشت", "ManageMessage", "User",new { }, new { @class = "btn btn-warning" })
                            </div>
                        </div>
                    </div>
                }

                <script src="~/Scripts/jquery.validate.min.js"></script>
                <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
            </div>
        </div>
    </div>
</section>